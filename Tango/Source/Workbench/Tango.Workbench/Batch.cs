using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Arrow.Logging;
using Arrow.Threading.Tasks;

namespace Tango.Workbench
{
    /// <summary>
    /// A batch describes the groups that will be run
    /// </summary>
    public abstract class Batch
    {
        private static readonly ILog Log = new PrefixLog(LogManager.GetDefaultLog(), "[RunSheet]");

        private readonly List<Group> m_Groups = new();

        /// <summary>
        /// Adds a new group to the batch
        /// </summary>
        /// <param name="group"></param>
        public void Add(Group group)
        {
            if(group is null) throw new ArgumentNullException(nameof(group));

            m_Groups.Add(group);
        }

        public async Task Run(RunConfig runConfig)
        {
            var scorecards = await RunGroups(runConfig);
            await HandleScorecards(scorecards);
        }

        /// <summary>
        /// Executes the batch
        /// </summary>
        /// <param name="runData"></param>
        /// <returns></returns>
        private async Task<IReadOnlyList<Scorecard>> RunGroups(RunConfig runConfig)
        {
            var scorecards = new List<Scorecard>();

            var doneInitialFrom = false;

            foreach(var group in m_Groups)
            {
                var runGroup = false;

                switch(runConfig.RunMode)
                {
                    case  RunMode.Single:
                        runGroup = string.Equals(group.Name, runConfig.GroupName, StringComparison.OrdinalIgnoreCase);
                        break;

                    case RunMode.From:
                        if(doneInitialFrom)
                        {
                            runGroup = true;
                        }
                        else
                        {
                            runGroup = string.Equals(group.Name, runConfig.GroupName, StringComparison.OrdinalIgnoreCase);
                            doneInitialFrom = runGroup;
                        }
                        break;

                    default:
                    case RunMode.All:
                        runGroup = true;
                        break;
                }

                if(group.Enabled == false)
                {
                    Log.Info($"Group {group.Name} is disabled");
                    continue;
                }

                if(runGroup == false)
                {
                    Log.Info($" Not running group. Config = {runConfig}");
                    continue;
                }

                Log.Info($"Running {group.Name}");

                var (succeeded, scorecard) = await group.Run().ContinueOnAnyContext();
                scorecards.Add(scorecard);

                if(succeeded == false)
                {
                    // Oh no...
                    Environment.ExitCode = -1;
                    break;
                }
            }

            return scorecards;
        }

        /// <summary>
        /// Handles the scorecards generated by running the batch.
        /// For example, a derived class may send an email
        /// </summary>
        /// <param name="scorecards"></param>
        /// <returns></returns>
        protected virtual Task HandleScorecards(IReadOnlyList<Scorecard> scorecards)
        {
            return Task.CompletedTask;
        }

        /// <summary>
        /// Creates the job context that will be used by the jobs
        /// </summary>
        /// <param name="group"></param>
        /// <returns></returns>
        public abstract JobContext MakeContext(Group group);
    }
}
